// Code generated by MockGen. DO NOT EDIT.
// Source: simple-fasthttp/usecase/modul1 (interfaces: IUsecase)

// Package modul1 is a generated GoMock package.
package modul1

import (
	reflect "reflect"
	error "simple-fasthttp/framework/error"
	modul1 "simple-fasthttp/usecase/modul1"

	gomock "github.com/golang/mock/gomock"
	fasthttp "github.com/valyala/fasthttp"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockIUsecase) CreateData(arg0 *fasthttp.RequestCtx, arg1 *modul1.CreateRequest) *error.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", arg0, arg1)
	ret0, _ := ret[0].(*error.Error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockIUsecaseMockRecorder) CreateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockIUsecase)(nil).CreateData), arg0, arg1)
}

// DeleteData mocks base method.
func (m *MockIUsecase) DeleteData(arg0 *fasthttp.RequestCtx, arg1 *modul1.DeleteRequest) *error.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", arg0, arg1)
	ret0, _ := ret[0].(*error.Error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockIUsecaseMockRecorder) DeleteData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockIUsecase)(nil).DeleteData), arg0, arg1)
}

// GetData mocks base method.
func (m *MockIUsecase) GetData(arg0 *fasthttp.RequestCtx, arg1 *modul1.Request) (*modul1.ResponseAll, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].(*modul1.ResponseAll)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockIUsecaseMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockIUsecase)(nil).GetData), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockIUsecase) UpdateData(arg0 *fasthttp.RequestCtx, arg1 *modul1.UpdateRequest) *error.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*error.Error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockIUsecaseMockRecorder) UpdateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockIUsecase)(nil).UpdateData), arg0, arg1)
}
